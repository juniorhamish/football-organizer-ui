# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build and Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    strategy:
      matrix:
        node-version: [19.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm run lint
    - run: npm run test:ci
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Log in to Docker Hub
      if: ${{ github.ref == 'refs/heads/main' }}
      run: docker login -u ${{ secrets.DOCKER_USER }}
        -p ${{ secrets.DOCKER_PASS }}
    - name: Build Docker image
      if: ${{ github.ref == 'refs/heads/main' }}
      run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
    - name: Publish Docker image
      if: ${{ github.ref == 'refs/heads/main' }}
      run: docker push $REPO
  redeploy:
    name: Redeploy on OCI instance
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/oci.key
          chmod 600 ~/.ssh/oci.key
          cat >>~/.ssh/config <<END
          Host oci
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/oci.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.OCI_DEPLOY_USER }}
          SSH_KEY: ${{ secrets.OCI_SSH_KEY }}
          SSH_HOST: ${{ secrets.OCI_DEPLOY_HOST }}
      - name: Execute redeploy command
        run: ssh oci '/home/docker/redeploy.sh'
